"""Trying darknet on imagenet tiny."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/50_darknet.ipynb.

# %% auto 0
__all__ = ['ConvBlock', 'get_darknet19']

# %% ../nbs/50_darknet.ipynb 4
from minai import *

import torch
import torch.nn as nn
from datasets import load_dataset, load_dataset_builder
from torcheval.metrics import  MulticlassAccuracy
import torchvision.transforms.v2.functional as TF

import fastcore.all as fc, numpy as np, matplotlib as mpl, matplotlib.pyplot as plt

import httpx

# %% ../nbs/50_darknet.ipynb 31
class ConvBlock(nn.Module):
    def __init__(self, in_ch, out_ch, ks=3, use_norm=True, use_act=True, act=nn.LeakyReLU(0.1)):
        super().__init__()
        pad = 1 if ks == 3 else 0
        self.conv = nn.Conv2d(in_ch, out_ch, ks, padding=pad)
        self.norm = nn.BatchNorm2d(out_ch) if use_norm else nn.Identity()
        self.act = act if use_act else nn.Identity()

    def forward(self, x): 
        return self.act(self.norm(self.conv(x)))

# %% ../nbs/50_darknet.ipynb 32
def get_darknet19(conv=ConvBlock, pool=nn.MaxPool2d(2)):
    return nn.Sequential(
            # Initial layers
            conv(3, 32),
            pool,
            conv(32, 64),
            pool,
            
            # First block
            conv(64, 128),
            conv(128, 64, ks=1),
            conv(64, 128),
            pool,
            
            # Second block
            conv(128, 256),
            conv(256, 128, ks=1),
            conv(128, 256),
            pool,
            
            # Third block
            conv(256, 512),
            conv(512, 256, ks=1),
            conv(256, 512),
            conv(512, 256, ks=1),
            conv(256, 512),
            pool,
            
            # Fourth block
            conv(512, 1024),
            conv(1024, 512, ks=1),
            conv(512, 1024),
            conv(1024, 512, ks=1),
            conv(512, 1024)
    )
