"""Trying darknet on imagenet tiny."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/50_darknet.ipynb.

# %% auto 0
__all__ = ['get_simple_model', 'ConvBlock', 'get_darknet19']

# %% ../nbs/50_darknet.ipynb 4
import torch
import torch.nn as nn

# %% ../nbs/50_darknet.ipynb 24
def get_simple_model():
    return nn.Sequential(
#     nn.Conv2d(3, 16, kernel_size=3, stride=2, padding=1),
#     nn.BatchNorm2d(16),
#     nn.ReLU(),
#     nn.Conv2d(16, 16, kernel_size=3, stride=2, padding=1),
#     nn.BatchNorm2d(16),
#     nn.ReLU(),
#     nn.Conv2d(16, 200, kernel_size=3, stride=2, padding=1),
#     nn.BatchNorm2d(200),
#     nn.ReLU(),
#     nn.AdaptiveAvgPool2d(1),
#     nn.Flatten()
        nn.Conv2d(3, 200, kernel_size=5, stride=2, padding=1),
        nn.BatchNorm2d(200),
        nn.ReLU(),
        nn.AdaptiveAvgPool2d(1),
        nn.Flatten()
)

# %% ../nbs/50_darknet.ipynb 34
class ConvBlock(nn.Module):
    def __init__(self, in_ch, out_ch, ks=3, use_norm=True, use_act=True, act=nn.LeakyReLU(0.1)):
        super().__init__()
        pad = 1 if ks == 3 else 0
        self.conv = nn.Conv2d(in_ch, out_ch, ks, padding=pad)
        self.norm = nn.BatchNorm2d(out_ch) if use_norm else nn.Identity()
        self.act = act if use_act else nn.Identity()

    def forward(self, x): 
        return self.act(self.norm(self.conv(x)))

# %% ../nbs/50_darknet.ipynb 35
def get_darknet19(conv=ConvBlock, pool=nn.MaxPool2d(2)):
    return nn.Sequential(
            # Initial layers
            conv(3, 32),
            pool,
            conv(32, 64),
            pool,
            
            # First block
            conv(64, 128),
            conv(128, 64, ks=1),
            conv(64, 128),
            pool,
            
            # Second block
            conv(128, 256),
            conv(256, 128, ks=1),
            conv(128, 256),
            pool,
            
            # Third block
            conv(256, 512),
            conv(512, 256, ks=1),
            conv(256, 512),
            conv(512, 256, ks=1),
            conv(256, 512),
            pool,
            
            # Fourth block
            conv(512, 1024),
            conv(1024, 512, ks=1),
            conv(512, 1024),
            conv(1024, 512, ks=1),
            conv(512, 1024)
    )
